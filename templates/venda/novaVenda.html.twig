{% extends "pagesApp.html.twig" %}

{% block title %}
    Nova venda
{% endblock %}
{% block addStylesheet %}
    <link rel="stylesheet" href="{{ asset('styles/novaVenda.css') }}">
{% endblock %}
{% block content %}
    <main>
        <h2 class="text-white h2 p-2 mb-3">Nova Venda</h2>

        <section>
            <div class="card-area">
                <div class="card-item">
                    <div class="card-top">
                        <span class="card-titulo">Total</span>
                        <div class="card-right">
                            <img src="{{ asset('images/simbolo-do-dolar.png') }}" alt="simbolo-do-dolar.png">
                        </div>
                    </div>
                    <div class="card-bottom">
                        <p class="resultado">R$ - </p>
                    </div>
                </div>
                <div class="card-item">
                    <div class="card-top">
                        <span class="card-titulo">Status</span>
                        <div class="card-right">
                            <img src="{{ asset('images/status.png') }}" alt="status.png">
                        </div>
                    </div>
                    <div class="card-bottom">
                        <p class="resultado">-</p>
                    </div>
                </div>
                <div class="card-item">
                    <div class="card-top">
                        <span class="card-titulo">Data</span>
                        <div class="card-right">
                            <img src="{{ asset('images/calendario-de-parede-mensal.png') }}" alt="calendario-de-parede-mensal.png">
                        </div>
                    </div>
                    <div class="card-bottom">
                        <p class="resultado">-</p>
                    </div>
                </div>
            </div>
        </section>

      <section class="formulario">
            <form id="finalizarVendaForm" action="{{ path('finalizarCarrinho') }}" method="POST" data-turbo="false">
                <p class="texto">Cliente*</p>
                <div class="formulario-area">
                    <select class="form-select" id="cliente-Select" name="cliente" required>
                        <option value="">Selecione um cliente</option>
                    </select>
                    <button type="submit" class="Finalizar-button" disabled>
                        <strong>Finalizar venda</strong>
                    </button>
                </div>

                <!-- Aqui serão inseridos os campos ocultos dos produtos -->
                <div id="produtosHidden"></div>

                <p class="texto">Produto*</p>
                <div class="formulario-area">
                    <select class="form-select" id="produto-Select" name="produto">
                        <option value="">Selecione um produto</option>
                    </select>
                    <button type="button" class="Finalizar-button" onclick="adicionarProdutoCarrinho()">Adicionar produto</button>
                </div>
            </form>
     </section>


       

    <section class="tabela">
            <table>
                <thead>
                    <tr class="tabela-topo">
                        <th scope="col">Nome</th>
                        <th scope="col">Categoria</th>
                        <th scope="col">Estoque</th>
                        <th scope="col">Quantidade</th>
                        <th scope="col">Total</th>

                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody id="tabela">
                     <td>nenhum carrinho selecionado</td>
                </tbody>
            </table>
        </section>

    </main>


{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        async function carregarClientes() {
              try {
                  const response = await fetch('/api/clientes', {
                     method: 'GET',
                      headers: { 'Content-Type': 'application/json' }
                  });
                  if (!response.ok) throw new Error('Erro ao carregar clientes');
                  const clientes = await response.json();

                  const clienteSelect = document.getElementById('cliente-Select');
                  clientes.forEach(cliente => {
                        const option = document.createElement('option');
                      option.value = cliente.id;
                      option.textContent = cliente.nome;
                      clienteSelect.appendChild(option);
                  });
              } catch (error) {
                  console.error('Erro ao carregar clientes:', error);
              }
        }
         
        async function carregarProdutos() {
            try {
                const response = await fetch('/api/produto/consultar', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                if (!response.ok) throw new Error('Erro ao carregar produtos');
                const produtos = await response.json();

                const produtoSelect = document.getElementById('produto-Select');
                produtos.forEach(produto => {
                    const option = document.createElement('option');
                    option.value = produto.id;
                    option.textContent = produto.nome;
                    produtoSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Erro ao carregar produtos:', error);
            }
        }

       let produtosCarrinho = [];

function adicionarProdutoCarrinho() {
    const produtoSelect = document.getElementById('produto-Select');
    const produtoId = produtoSelect.value;

    if (produtoId) {
        const produto = {
            id: produtoId,
            nome: produtoSelect.options[produtoSelect.selectedIndex].text,
            qt_disponivel: 1, // Quantidade padrão ou de outro campo
            valor: 100.00 // Exemplo de valor, deve ser substituído pelo valor real
        };

        // Adiciona o produto ao array de produtos do carrinho
        produtosCarrinho.push(produto);

        // Atualiza a tabela de produtos no frontend
        const tabela = document.getElementById('tabela');
        const novaLinha = document.createElement('tr');
        novaLinha.innerHTML = `
            <td>${produto.nome}</td>
            <td>Categoria</td>
            <td>${produto.qt_disponivel}</td>
            <td>
                <input class="input-number" type="number" value="${produto.qt_disponivel}" min="1">
            </td>
            <td>${produto.valor.toFixed(2)}</td>
        `;
        tabela.appendChild(novaLinha);

        // Atualiza o campo oculto com a string JSON dos produtos
        const produtosHidden = document.getElementById('produtosHidden');
        produtosHidden.innerHTML = '';  // Limpa os campos antigos
        const inputProdutos = document.createElement('input');
        inputProdutos.type = 'hidden';
        inputProdutos.name = 'produtos';
        inputProdutos.value = JSON.stringify(produtosCarrinho); // Serializa o array como JSON
        produtosHidden.appendChild(inputProdutos);

        // Habilita o botão de finalizar venda
        habilitarBotaoFinalizarVenda();
    }
}

function habilitarBotaoFinalizarVenda() {
    const tabela = document.getElementById('tabela');
    const produtosAdicionados = tabela.getElementsByTagName('tr').length > 0;

    const finalizarButton = document.querySelector('.Finalizar-button');
    finalizarButton.disabled = !produtosAdicionados;
}


         
        document.addEventListener('DOMContentLoaded', function() {
            carregarClientes();
            carregarProdutos()
            const clienteSelect = document.getElementById('cliente-Select');
            clienteSelect.addEventListener('change', function() {
                const clienteId = this.value;

                if (clienteId) {
                
                    fetch(`/api/buscar-ou-criar-carrinho/${clienteId}`)
                        .then(response => {
                            
                            if (!response.ok) {
                                throw new Error('Erro ao buscar o carrinho');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data)
                            if (data.error) {
                                alert(data.error);
                            } else {
                                displayCarrinhoInfo(data.carrinho);
                                preencherCards(data.carrinho);  
                            }
                        })
                        .catch(error => {
                            console.error('Erro:', error);
                            alert('Ocorreu um erro ao buscar o carrinho.');
                        });
                }
            });

            function displayCarrinhoInfo(carrinho) {
                const carrinhoInfoDiv = document.getElementById('tabela');
                carrinhoInfoDiv.innerHTML = ''; 

                carrinho.items.forEach(item => {
                    carrinhoInfoDiv.innerHTML += `
                        <tr>
                            <td>${item.produto.nome}</td>
                            <td>${item.produto.categoria_id.id}</td>
                            <td class="quantidade">
                                <input class="input-number" type="number" value="${item.produto.qt_disponivel}" min="1">
                            </td>
                            <td>${item.produto.qt_disponivel}</td>
                            <td>${item.valor.toFixed(2)}</td>
                        </tr>
                    `;
                });
            }

            function preencherCards(carrinho) {
            
                const valorTotal = carrinho.valor_total !== null && carrinho.valor_total !== undefined ? carrinho.valor_total : 0;
                const status = carrinho.status !== null && carrinho.status !== undefined ? carrinho.status : '-';
                const dataCriacao = carrinho.criado_em !== null && carrinho.criado_em.date ? carrinho.criado_em.date : null;

                const totalCard = document.querySelector('.card-area .card-item:nth-child(1) .resultado');
                if (totalCard) {
                    totalCard.textContent = `R$${valorTotal.toFixed(2)}`;
                }

                const statusCard = document.querySelector('.card-area .card-item:nth-child(2) .resultado');
                if (statusCard) {
                    statusCard.textContent = status;
                }

                const dataCard = document.querySelector('.card-area .card-item:nth-child(3) .resultado');
                if (dataCard && dataCriacao) {
                    const dataFormatada = new Date(dataCriacao).toLocaleDateString('pt-BR');
                    dataCard.textContent = dataFormatada;
                } else if (dataCard) {
                    dataCard.textContent = '-';
                }
            }
        });
    </script>
{% endblock %}



