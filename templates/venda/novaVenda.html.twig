{% extends "pagesApp.html.twig" %}

{% block addStylesheet %}
    <link rel="stylesheet" href="{{ asset('styles/novaVenda.css') }}">
{% endblock %}
{% block content %}
    <main>
        <h2 class="text-white h2 p-2 mb-3">Nova Venda</h2>

        <section>
            <div class="card-area">
               <div class="card-item">
                <div class="card-top">
                    <span class="card-titulo">Total</span>
                    <div class="card-right">
                        <img src="{{ asset('images/simbolo-do-dolar.png') }}" alt="simbolo-do-dolar.png">
                    </div>
                </div>
                <div class="card-bottom">
                    <p class="resultado">R$ - </p> 
                </div>
            </div>
                <div class="card-item">
                    <div class="card-top">
                        <span class="card-titulo">Status</span>
                        <div class="card-right">
                            <img src="{{ asset('images/status.png') }}" alt="status.png">
                        </div>
                    </div>
                    <div class="card-bottom">
                        <p class="resultado">-</p>
                    </div>
                </div>
                <div class="card-item">
                    <div class="card-top">
                        <span class="card-titulo">Data</span>
                        <div class="card-right">
                            <img src="{{ asset('images/calendario-de-parede-mensal.png') }}" alt="calendario-de-parede-mensal.png">
                        </div>
                    </div>
                    <div class="card-bottom">
                        <p class="resultado">-</p>
                    </div>
                </div>
            </div>
        </section>

        <section class="formulario">
            <form id="finalizarVendaForm" action="{{ path('finalizarCarrinho') }}" method="POST" data-turbo="false">
                <p class="texto">Cliente*</p>
                <div class="formulario-area">
                    <select class="form-select" id="cliente-Select" name="cliente" required>
                        <option value="">Selecione um cliente</option>
                    </select>
                    <button type="submit" class="Finalizar-button">
                        <strong>Ir para pagamento</strong>
                    </button>
                </div>

              
                <div id="produtosHidden"></div>

                <p class="texto">Produto*</p>
                <div class="formulario-area">
                    <select class="form-select" id="produto-Select" name="produto">
                        <option value="">Selecione um produto</option>
                    </select>
                </div>
            </form>
        </section>

        <section class="tabela">
            <div class="table-responsive">
                <table class=" table-striped ">
                    <thead class="tabela-topo">
                        <tr class="tabela-topo">
                            <th scope="col">Nome</th>
                            <th scope="col">Categoria</th>
                            <th scope="col">Estoque</th>
                            <th scope="col">Quantidade</th>
                            <th scope="col">Total</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody id="tabela">
                        <tr>
                            <td colspan="6">Nenhum carrinho selecionado</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </section> 
    </main>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        let carrinhoId; 
        let produtosCarrinho = [];
        async function carregarClientes() {
            try {
                const response = await fetch('/api/clientes', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                if (!response.ok) throw new Error('Erro ao carregar clientes');
                const clientes = await response.json();

                const clienteSelect = document.getElementById('cliente-Select');
                clientes.forEach(cliente => {
                    const option = document.createElement('option');
                    option.value = cliente.id;
                    option.textContent = cliente.nome;
                    clienteSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Erro ao carregar clientes:', error);
            }

        }

        document.addEventListener('DOMContentLoaded', function() {
            carregarClientes();
            
            
            const clienteSelect = document.getElementById('cliente-Select');
            clienteSelect.addEventListener('change', function() {
                const clienteId = this.value;

                if (clienteId) {
                    verificarDescarteCarrinho(clienteId);
                    fetch(`/api/buscar-ou-criar-carrinho/${clienteId}`)
                        .then(response => { 
                            if (false === response.ok) {
                                return Promise.reject(response);
                            }
                            return response.json();
                        })
                        .then(data => {
                            carrinhoId = data.carrinho.id;
                            const carrinhoStatus = data.carrinho.status;
                            
                            if(carrinhoStatus === "aguardando pagamento"){
                                window.location.href = "{{ path('confirmarPagamentoShow', {carrinho: 'CARRINHO_ID' }) }}"
                                .replace('CARRINHO_ID',carrinhoId);
                            }else{
                                displayCarrinhoInfo(data.carrinho);
                                preencherCards(data.carrinho); 
                                carregarProdutos();
                            }
                        })
                        .catch(response => response.json().then(data => alert(data.error)))
                }
            });

            async function carregarProdutos() { 
                try {  
                    const response = await fetch(`/api/produto/consultar/${carrinhoId}`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    if (!response.ok) throw new Error('Erro ao carregar produtos');
                     
                    const produtos = JSON.parse(await response.json());
                    const produtoSelect = document.getElementById('produto-Select');

                    if (Array.isArray(produtos)) {
                        produtos?.forEach(produto => {
                            const option = document.createElement('option');
                            option.value = produto.id; 
                            option.textContent = produto.nome;
                            produtoSelect.appendChild(option);

                            produtoSelect.addEventListener('change', function() {
                                const produtoIdSelecionado = this.value;
                                const produtoSelecionado = produtos.find(produto => produto.id == produtoIdSelecionado);

                                if (produtoSelecionado) {
                                    const produtoJaAdicionado = produtosCarrinho.some(produto => produto.id == produtoSelecionado.id);

                                    if (produtoJaAdicionado) {
                                        return;
                                    } else {
                                        const tabela = document.getElementById('tabela');
                                        
                                        produtosCarrinho.push({
                                            id: produtoSelecionado.id,
                                            quantidade: 1,
                                            valorUnitario: produtoSelecionado.valor  
                                        });

                                        const novaLinha = document.createElement('tr');
                                        const valorTotalProduto = produtoSelecionado.valor * 1; 
                                        const valorTotalFormatado = valorTotalProduto.toLocaleString("pt-BR", { style: "currency", currency: "BRL" });
                                        
                                        novaLinha.innerHTML = ` 
                                            <td  scope="col">${produtoSelecionado.nome}</td>
                                            <td  scope="col">${produtoSelecionado.categoria_id.nome || 'Categoria'}</td>
                                            <td scope="col">${produtoSelecionado.qt_disponivel}</td>
                                            <td scope="col">
                                                <input class="input-number rounded" type="number" value="1" min="1" max="${produtoSelecionado.qt_disponivel}" data-valor-unitario="${produtoSelecionado.valor}">
                                            </td>
                                            <td  scope="col" class="item-total">${valorTotalProduto.toFixed(2)}</td>
                                           <td>
                                                <button class="button btn btn-danger p-1" data-id="${produtoSelecionado.id}"><i class="bi bi-x"></i></button>
                                            </td>
                                        `;

                                        tabela.appendChild(novaLinha);
                                        
                                        document.getElementById('tabela').addEventListener('click', function(event){
                                            if(event.target.closest('.button')){
                                                const produtoId = event.target.closest('.button').getAttribute("data-id");

                                                produtosCarrinho = produtosCarrinho.filter(produto => produto.id != produtoId);
                                                event.target.closest('tr').remove();
                                            }
                                        })
                                       
                                        const inputQuantidade = novaLinha.querySelector('input[type="number"]');
                                        inputQuantidade.addEventListener('input', function() {
                                            const novaQuantidade = parseInt(this.value); 
                                            const valorUnitario = parseFloat(this.getAttribute('data-valor-unitario'));  
                                            
                                            if (isNaN(novaQuantidade) || isNaN(valorUnitario)) {
                                                console.error('Erro ao calcular o valor total: quantidade ou valor unitário inválido');
                                                return;
                                            }

                                            const itemTotalCell = novaLinha.querySelector('.item-total');

                                            const novoTotalItem = valorUnitario * novaQuantidade;
                                            itemTotalCell.textContent = novoTotalItem.toFixed(2);

                                            recalcularTotalCarrinho();
                                        });

                                        const dataAtual = new Date().toLocaleDateString('pt-BR');
                                        document.querySelectorAll('.card-item .resultado')[2].textContent = dataAtual;

                                        recalcularTotalCarrinho();
                                    }
                                }
                            });
                        });
                    }
                } catch (error) {
                    alert("Não existe produtos")
                    console.error('Erro ao carregar produtos:', error);
                }

            }

            function recalcularTotalCarrinho() {
                let totalCarrinho = 0;
               
                const totaisItens = document.querySelectorAll('.item-total');
              
                totaisItens.forEach(itemTotal => {
                    const itemTotalValue = parseFloat(itemTotal.textContent);
                    
                    if (!isNaN(itemTotalValue)) {
                        totalCarrinho += itemTotalValue;
                        
                    }
                });
               
                const totalCard = document.querySelector('.card-item .resultado');
                if (totalCard) {
                    totalCard.textContent = totalCarrinho.toLocaleString('pt-BR',{
                        style: 'currency',
                        currency: 'BRL'
                    });
                }
            }

            const form = document.getElementById('finalizarVendaForm');
            form.addEventListener("submit", function(event) {
                event.preventDefault();

                if(produtosCarrinho.length === 0){
                    alert("O carrinho não contém produtos. Por favor, adicione produtos antes de continuar.");
                    return;
                }
                
                const tabela = document.getElementById('tabela');
                const linhas = tabela.getElementsByTagName('tr');

                produtosCarrinho.forEach((produto,index) =>{
                    const inputQuantidade = linhas[index].querySelector('input[type="number"]')
                    produto.quantidade = inputQuantidade.value;
                })

                const dados = {
                    cliente: clienteSelect.value,
                    produtos: produtosCarrinho.map(produto => ({
                        id: produto.id,
                        quantidade: produto.quantidade
                    }))
                };

                fetch('{{ path('finalizarCarrinho') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(dados)
                })
                .then(response => {
                    if (response.ok) {
                        window.location.href = "{{ path('confirmarPagamentoShow', {carrinho: 'CARRINHO_ID' }) }}"
                            .replace('CARRINHO_ID',carrinhoId);
                    }

                    response.json()
                })
                .then(data => {
                    alert(data.message || data.error);
                })
                .catch(error => {
                    console.error('Erro ao finalizar venda:', error);
                });
            });

            function displayCarrinhoInfo(carrinho) { 
                const carrinhoInfoDiv = document.getElementById('tabela');
                carrinhoInfoDiv.innerHTML = '';
                
                carrinho.items.forEach((item,index) => {
                   
                    carrinhoInfoDiv.innerHTML += `
                        <tr class="tr-responsivo">
                            <td scope="col">${item.produto.nome}</td>
                            <td scope="col">${item.produto.categoria_id.nome}</td>
                            <td  scope="col">${item.produto.qt_disponivel}</td>
                            <td  scope="col" class="quantidade">
                                <input id="quantidade-${index}" class="input-number qt" type="number" value="${item.quantidade}" min="1">
                            </td>
                            <td  scope="col">${item.valor.toLocaleString("pt-BR")}</td>
                        </tr>
                    `;
                });
                recalcularTotalCarrinho();
            }

            function preencherCards(carrinho) { 
                const cards = document.querySelectorAll('.card-item .card-bottom .resultado');

                const total = carrinho.valor_total && !isNaN(carrinho.valor_total) ? carrinho.valor_total : 0;
                cards[0].textContent = `R$ ${total}`; 

                const status = carrinho.status || '-';
                cards[1].textContent = status;

                const dataCriacao = carrinho.criado_em || '-';
                cards[2].textContent = dataCriacao;
            }

            function verificarDescarteCarrinho(carrinhoId){
                fetch(`/api/carrinho/descartar/${carrinhoId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(response.error);
                        }
                        return response.json();
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }
        });
    </script>
{% endblock %}